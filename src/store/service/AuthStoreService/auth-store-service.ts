import RootStore from "../../RootStore";import {RoomType, DataSignUpType} from "../../../api/api";import {LoadingEnum} from "../../types/types";import {DataPatientType} from "../../AuthStore/auth-store";export class AuthStoreService {    rootStore: typeof RootStore;    async login(userData: { email: string; password: string }): Promise<void> {        this.rootStore.Notification.setIsLoading(LoadingEnum.fetching);        try {            await this.rootStore.AuthStore.login({email: userData.email, password: userData.password});        } catch (e) {            this.rootStore.Notification.setNotification('error', true, 'Ошибка, введены не правильные данные');        } finally {            this.rootStore.Notification.setIsLoading(LoadingEnum.success);        }    }    async register(userData: DataSignUpType): Promise<void> {        this.rootStore.Notification.setIsLoading(LoadingEnum.fetching);        try {            await this.rootStore.AuthStore.register(userData);        } catch (e) {            this.rootStore.Notification.setNotification('error', true, 'Ошибка, введены не правильные данные');        } finally {            this.rootStore.Notification.setIsLoading(LoadingEnum.success);        }    }    async createRoom(dataPatient: DataPatientType): Promise<RoomType | void> {        this.rootStore.Notification.setIsLoading(LoadingEnum.fetching);        try {            await this.rootStore.SocketStore.socketInit();            const data = await this.rootStore.SocketStore.createRoom(dataPatient);            return data        } catch (e) {            console.log(e)            this.rootStore.Notification.setNotification('error', true, 'Ошибка, create room');        } finally {            this.rootStore.Notification.setIsLoading(LoadingEnum.success);        }    }    async findRooms(): Promise<RoomType | void> {        try {            await this.rootStore.AuthStore.findRooms();        } catch (e) {            this.rootStore.Notification.setNotification('error', true, 'Ошибка, finds room');        } finally {        }    }    async joinRoom(idRoom): Promise<RoomType | void> {        this.rootStore.Notification.setIsLoading(LoadingEnum.fetching);        try {            await this.rootStore.SocketStore.socketInit();            return await this.rootStore.SocketStore.joinRoom(idRoom);        } catch (e) {            console.log(e)            this.rootStore.Notification.setNotification('error', true, 'Ошибка, введены не правильные данные');        } finally {            this.rootStore.Notification.setIsLoading(LoadingEnum.success);        }    }    async getDonePatients(): Promise<RoomType | void> {        this.rootStore.Notification.setIsLoading(LoadingEnum.fetching);        try {            return await this.rootStore.AuthStore.getDonePatients();        } catch (e) {            this.rootStore.Notification.setNotification('error', true, 'Ошибка, get done patient');        } finally {            this.rootStore.Notification.setIsLoading(LoadingEnum.success);        }    }    constructor(rootStore: typeof RootStore) {        this.rootStore = rootStore;    }}export default AuthStoreService;